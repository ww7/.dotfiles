# : << EOF
# https://github.com/gpakosz/.tmux
# (‚Äë‚óè‚Äë‚óè)> dual licensed under the WTFPL v2 license and the MIT license,
#         without any warranty.
#         Copyright 2012‚Äî Gregory Pakosz (@gpakosz).


# -- session creation ----------------------------------------------------------

# prompt for session name when creating a new session, possible values are:
#   - true
#   - false (default)
#   - disabled (do not modify new-session bindings)
tmux_conf_new_session_prompt=false

#new -A -s dummy # to start session index from 1
#new-session -d -s dummy # to start session index from 1
#new-session -d -s w # locals
#new-session -d -s s # remotes
#run '"$TMUX_PROGRAM" has-session -t dummy 2>/dev/null || tmux new-session -A -s dummy -d; tmux attach-session -t dummy'

# -- windows & pane creation ---------------------------------------------------

# new window retains current path, possible values are:
#   - true
#   - false (default)
#   - disabled (do not modify new-window bindings)
tmux_conf_new_window_retain_current_path=false

# new window tries to reconnect ssh sessions, possible values are:
#   - true
#   - false (default)
#   - disabled (do not modify new-window bindings)
tmux_conf_new_window_reconnect_ssh=false

# new pane retains current path, possible values are:
#   - true (default)
#   - false
#   - disabled (do not modify split-window bindings)
tmux_conf_new_pane_retain_current_path=true

# new pane tries to reconnect ssh sessions, possible values are:
#   - true
#   - false (default)
#   - disabled (do not modify split-window bindings)
tmux_conf_new_pane_reconnect_ssh=false


# -- display -------------------------------------------------------------------

# RGB 24-bit colour support, possible values are:
#   - true
#   - false
#   - auto (default)
#
# automatic detection relies on the COLORTERM environment variable being defined
# to 'truecolor' or '24bit' or '$ tput colors' answering '16777216'
# see https://github.com/termstandard/colors
tmux_conf_24b_colour=auto


# -- theming -------------------------------------------------------------------

# enable or disable theming:
#   - enabled (default)
#   - disabled
# when disabled, all tmux_conf_theme_xxx variables are ignored except:
#   - tmux_conf_theme_pairing
#   - tmux_conf_theme_prefix
#   - tmux_conf_theme_mouse
#   - tmux_conf_theme_root
#   - tmux_conf_theme_synchronized
tmux_conf_theme=enabled

# default theme
tmux_conf_theme_colour_1="#080808"    # dark gray
tmux_conf_theme_colour_2="#303030"    # gray
tmux_conf_theme_colour_3="#8a8a8a"    # light gray
tmux_conf_theme_colour_4="#00afff"    # light blue
tmux_conf_theme_colour_5="#ffff00"    # yellow
tmux_conf_theme_colour_6="#080808"    # dark gray
tmux_conf_theme_colour_7="#e4e4e4"    # white
tmux_conf_theme_colour_8="#080808"    # dark gray
tmux_conf_theme_colour_9="#ffff00"    # yellow
tmux_conf_theme_colour_10="#ff00af"   # pink
tmux_conf_theme_colour_11="#5fff00"   # green
tmux_conf_theme_colour_12="#8a8a8a"   # light gray
tmux_conf_theme_colour_13="#e4e4e4"   # white
tmux_conf_theme_colour_14="#080808"   # dark gray
tmux_conf_theme_colour_15="#080808"   # dark gray
tmux_conf_theme_colour_16="#d70000"   # red
tmux_conf_theme_colour_17="#e4e4e4"   # white

# default theme (ansi)
#tmux_conf_theme_colour_1="colour0"
#tmux_conf_theme_colour_2="colour8"
#tmux_conf_theme_colour_3="colour8"
#tmux_conf_theme_colour_4="colour14"
#tmux_conf_theme_colour_5="colour11"
#tmux_conf_theme_colour_6="colour0"
#tmux_conf_theme_colour_7="colour15"
#tmux_conf_theme_colour_8="colour0"
#tmux_conf_theme_colour_9="colour11"
#tmux_conf_theme_colour_10="colour13"
#tmux_conf_theme_colour_11="colour10"
#tmux_conf_theme_colour_12="colour8"
#tmux_conf_theme_colour_13="colour15"
#tmux_conf_theme_colour_14="colour0"
#tmux_conf_theme_colour_15="colour0"
#tmux_conf_theme_colour_16="colour1"
#tmux_conf_theme_colour_17="colour15"

# window style
tmux_conf_theme_window_fg="default"
tmux_conf_theme_window_bg="default"

# highlight focused pane, possible values are:
#   - true
#   - false (default)
tmux_conf_theme_highlight_focused_pane=false

# focused pane colours:
tmux_conf_theme_focused_pane_bg="$tmux_conf_theme_colour_2"

# pane border style, possible values are:
#   - thin (default)
#   - fat
tmux_conf_theme_pane_border_style=thin

# pane borders colours:
tmux_conf_theme_pane_border="$tmux_conf_theme_colour_2"
tmux_conf_theme_pane_active_border="$tmux_conf_theme_colour_4"
%if #{>=:#{version},3.2}
tmux_conf_theme_pane_active_border="#{?pane_in_mode,$tmux_conf_theme_colour_9,#{?synchronize-panes,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_4}}"
%endif

# pane indicator colours (when you hit <prefix> + q)
tmux_conf_theme_pane_indicator="$tmux_conf_theme_colour_4"
tmux_conf_theme_pane_active_indicator="$tmux_conf_theme_colour_4"

# status line style
tmux_conf_theme_message_fg="$tmux_conf_theme_colour_1"
tmux_conf_theme_message_bg="$tmux_conf_theme_colour_5"
tmux_conf_theme_message_attr="bold"

# status line command style (<prefix> : Escape)
tmux_conf_theme_message_command_fg="$tmux_conf_theme_colour_5"
tmux_conf_theme_message_command_bg="$tmux_conf_theme_colour_1"
tmux_conf_theme_message_command_attr="bold"

# window modes style
tmux_conf_theme_mode_fg="$tmux_conf_theme_colour_1"
tmux_conf_theme_mode_bg="$tmux_conf_theme_colour_5"
tmux_conf_theme_mode_attr="bold"

# status line style
tmux_conf_theme_status_fg="$tmux_conf_theme_colour_3"
tmux_conf_theme_status_bg="$tmux_conf_theme_colour_1"
tmux_conf_theme_status_attr="none"

# terminal title
#   - built-in variables are:
#     - #{circled_window_index}
#     - #{circled_session_name}
#     - #{hostname}
#     - #{hostname_ssh}
#     - #{hostname_full}
#     - #{hostname_full_ssh}
#     - #{username}
#     - #{username_ssh}
#tmux_conf_theme_terminal_title="#h ‚ùê #S ‚óè #I #W"
tmux_conf_theme_terminal_title="#{hostname} ‚ùê #S ‚óè #I #W #{?hostname_ssh,!#{hostname_ssh},}"

# window status style
#   - built-in variables are:
#     - #{circled_window_index}
#     - #{circled_session_name}
#     - #{hostname}
#     - #{hostname_ssh}
#     - #{hostname_full}
#     - #{hostname_full_ssh}
#     - #{username}
#     - #{username_ssh}
tmux_conf_theme_window_status_fg="$tmux_conf_theme_colour_3"
tmux_conf_theme_window_status_bg="$tmux_conf_theme_colour_1"
tmux_conf_theme_window_status_attr="none"
#tmux_conf_theme_window_status_format="#I #W #{hostname_ssh}#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}"
#tmux_conf_theme_window_status_format="#{circled_window_index} #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}"
tmux_conf_theme_window_status_format="#I #W #{hostname_ssh}#{?#{||:#{window_bell_flag},#{window_zoomed_flag}},,}#{?window_bell_flag,üîî,}#{?window_zoomed_flag,üîç,}"

# window current status style
#   - built-in variables are:
#     - #{circled_window_index}
#     - #{circled_session_name}
#     - #{hostname}
#     - #{hostname_ssh}
#     - #{hostname_full}
#     - #{hostname_full_ssh}
#     - #{username}
#     - #{username_ssh}
tmux_conf_theme_window_status_current_fg="$tmux_conf_theme_colour_1"
tmux_conf_theme_window_status_current_bg="$tmux_conf_theme_colour_4"
tmux_conf_theme_window_status_current_attr="bold"
#tmux_conf_theme_window_status_current_format="#I #W #{hostname_ssh}#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}"
#tmux_conf_theme_window_status_current_format="#{circled_window_index} #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}"
tmux_conf_theme_window_status_current_format="#I #W #{hostname_ssh}#{?#{||:#{window_bell_flag},#{window_zoomed_flag}},,}#{?window_bell_flag,üîî,}#{?window_zoomed_flag,üîç,}"

# window activity status style
tmux_conf_theme_window_status_activity_fg="default"
tmux_conf_theme_window_status_activity_bg="default"
tmux_conf_theme_window_status_activity_attr="underscore"

# window bell status style
tmux_conf_theme_window_status_bell_fg="$tmux_conf_theme_colour_5"
tmux_conf_theme_window_status_bell_bg="default"
tmux_conf_theme_window_status_bell_attr="blink,bold"

# window last status style
tmux_conf_theme_window_status_last_fg="$tmux_conf_theme_colour_4"
tmux_conf_theme_window_status_last_bg="$tmux_conf_theme_colour_2"
tmux_conf_theme_window_status_last_attr="none"

# status left/right sections separators
tmux_conf_theme_left_separator_main=""
tmux_conf_theme_left_separator_sub="|"
tmux_conf_theme_right_separator_main=""
tmux_conf_theme_right_separator_sub="|"
#tmux_conf_theme_left_separator_main='\uE0B0'  # /!\ you don't need to install Powerline
#tmux_conf_theme_left_separator_sub='\uE0B1'   #   you only need fonts patched with
#tmux_conf_theme_right_separator_main='\uE0B2' #   Powerline symbols or the standalone
#tmux_conf_theme_right_separator_sub='\uE0B3'  #   PowerlineSymbols.otf font, see README.md

# status left/right content:
#   - separate main sections with "|"
#   - separate subsections with ","
#   - built-in variables are:
#     - #{battery_bar}
#     - #{battery_hbar}
#     - #{battery_percentage}
#     - #{battery_status}
#     - #{battery_vbar}
#     - #{circled_session_name}
#     - #{hostname_ssh}
#     - #{hostname}
#     - #{hostname_full}
#     - #{hostname_full_ssh}
#     - #{loadavg}
#     - #{mouse}
#     - #{pairing}
#     - #{prefix}
#     - #{root}
#     - #{synchronized}
#     - #{uptime_y}
#     - #{uptime_d} (modulo 365 when #{uptime_y} is used)
#     - #{uptime_h}
#     - #{uptime_m}
#     - #{uptime_s}
#     - #{username}
#     - #{username_ssh}
#tmux_conf_theme_status_left=" ‚ùê #S | ‚Üë#{?uptime_y, #{uptime_y}y,}#{?uptime_d, #{uptime_d}d,}#{?uptime_h, #{uptime_h}h,}#{?uptime_m, #{uptime_m}m,} "
#tmux_conf_theme_status_left=" ‚ùê #S | #{uptime_ssh #{pane_pid} #{pane_tty}}"
tmux_conf_theme_status_left=" ‚ùê #S | "
#tmux_conf_theme_status_right="#{prefix}#{mouse}#{pairing}#{synchronized}#{?battery_percentage, #{battery_percentage},}#{?battery_status,#{battery_status},} #{myip} , %R , %d %b | #{username}#{root} | #{hostname_full} "
tmux_conf_theme_status_right="#{prefix}#{mouse}#{pairing}#{synchronized}#{?battery_percentage, #{battery_percentage},}#{?battery_status,#{battery_status},} #{myip} , %R , %d %b || #{username} @ #{hostname_full} "

#     host                   #H       Hostname of local host
#     host_short             #h       Hostname of local host (no domain name)

# status left style
tmux_conf_theme_status_left_fg="$tmux_conf_theme_colour_6,$tmux_conf_theme_colour_7,$tmux_conf_theme_colour_8"
tmux_conf_theme_status_left_bg="$tmux_conf_theme_colour_9,$tmux_conf_theme_colour_10,$tmux_conf_theme_colour_11"
tmux_conf_theme_status_left_attr="bold,none,none"

# status right style
tmux_conf_theme_status_right_fg="$tmux_conf_theme_colour_12,$tmux_conf_theme_colour_13,$tmux_conf_theme_colour_14"
tmux_conf_theme_status_right_bg="$tmux_conf_theme_colour_15,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_17"
tmux_conf_theme_status_right_attr="none,none,none"

# pairing indicator
tmux_conf_theme_pairing="‚öá"                 # U+2687
tmux_conf_theme_pairing_fg="none"
tmux_conf_theme_pairing_bg="none"
tmux_conf_theme_pairing_attr="none"

# prefix indicator
tmux_conf_theme_prefix="‚å®"                  # U+2328
tmux_conf_theme_prefix_fg="none"
tmux_conf_theme_prefix_bg="none"
tmux_conf_theme_prefix_attr="none"

# mouse indicator
tmux_conf_theme_mouse="‚Üó"                   # U+2197
tmux_conf_theme_mouse_fg="none"
tmux_conf_theme_mouse_bg="none"
tmux_conf_theme_mouse_attr="none"

# root indicator
tmux_conf_theme_root="!"
tmux_conf_theme_root_fg="none"
tmux_conf_theme_root_bg="none"
tmux_conf_theme_root_attr="bold,blink"

# synchronized indicator
tmux_conf_theme_synchronized="‚öè"            # U+268F
tmux_conf_theme_synchronized_fg="none"
tmux_conf_theme_synchronized_bg="none"
tmux_conf_theme_synchronized_attr="none"

# battery bar symbols
tmux_conf_battery_bar_symbol_full="‚óº"
tmux_conf_battery_bar_symbol_empty="‚óª"
#tmux_conf_battery_bar_symbol_full="‚ô•"
#tmux_conf_battery_bar_symbol_empty="¬∑"

# battery bar length (in number of symbols), possible values are:
#   - auto
#   - a number, e.g. 5
tmux_conf_battery_bar_length="auto"

# battery bar palette, possible values are:
#   - gradient (default)
#   - heat
#   - "colour_full_fg,colour_empty_fg,colour_bg"
tmux_conf_battery_bar_palette="gradient"
#tmux_conf_battery_bar_palette="#d70000,#e4e4e4,#000000"   # red, white, black

# battery hbar palette, possible values are:
#   - gradient (default)
#   - heat
#   - "colour_low,colour_half,colour_full"
tmux_conf_battery_hbar_palette="gradient"
#tmux_conf_battery_hbar_palette="#d70000,#ff5f00,#5fff00"  # red, orange, green

# battery vbar palette, possible values are:
#   - gradient (default)
#   - heat
#   - "colour_low,colour_half,colour_full"
tmux_conf_battery_vbar_palette="gradient"
#tmux_conf_battery_vbar_palette="#d70000,#ff5f00,#5fff00"  # red, orange, green

# symbols used to indicate whether battery is charging or discharging
tmux_conf_battery_status_charging="‚Üë"       # U+2191
tmux_conf_battery_status_discharging="‚Üì"    # U+2193
#tmux_conf_battery_status_charging="üîå"     # U+1F50C
#tmux_conf_battery_status_discharging="üîã"  # U+1F50B

# clock style (when you hit <prefix> + t)
# you may want to use %I:%M %p in place of %R in tmux_conf_theme_status_right
tmux_conf_theme_clock_colour="$tmux_conf_theme_colour_4"
tmux_conf_theme_clock_style="24"


# -- clipboard -----------------------------------------------------------------

# in copy mode, copying selection also copies to the OS clipboard
#   - true
#   - false (default)
#   - disabled
# on macOS, this requires installing reattach-to-user-namespace, see README.md
# on Linux, this requires xsel, xclip or wl-copy
tmux_conf_copy_to_os_clipboard=true


# -- user customizations -------------------------------------------------------
# this is the place to override or undo settings

# selection
set -g mode-style "bg=#ff00af" #!important

# increase history size
set -g history-limit 10000

# start with mouse mode enabled
set -g mouse on

# force Vi mode
#   really you should export VISUAL or EDITOR environment variable, see manual
# set -g status-keys vi
# set -g mode-keys vi

# replace C-b by C-a instead of using both prefixes
set -gu prefix2
unbind C-g
unbind C-b
set -g prefix C-g
bind C-g send-prefix
#set -g prefix2 `
#bind ` send-prefix -2

# if you don't want Oh my tmux! to alter a binding, use #!important
# bind c new-window -c '#{pane_current_path}' #!important

# move status line to top
set -g status-position top

# +

# window navigation
#unbind n
#unbind p
bind -r N previous-window
bind -r n next-window
# bind -r C-l next-window     # select next window
bind -r q last-window        # move to last active window
bind -r Q display-panes

# sessions navigation
set-option -g detach-on-destroy off

#switch-client -n
#switch-client -p

#set-window-option -g pane-border-status top
#set-window-option -g pane-border-format ''

unbind C
bind -r E customize-mode -Z
#bind -r S new-session
bind -r C new-session
#bind -r X if-shell '[ $(tmux list-sessions | wc -l) -ne 1 ]' "run-shell 'tmux switch-client -n \\\; kill-session -t \"#S\"'" "run-shell 'tmux kill-session -t \"#S\"'"
bind -r X kill-session

#tmux show-options -g

# -- tpm -----------------------------------------------------------------------

# while I don't use tpm myself, many people requested official support so here
# is a seamless integration that automatically installs plugins in parallel

# whenever a plugin introduces a variable to be used in 'status-left' or
# 'status-right', you can use it in 'tmux_conf_theme_status_left' and
# 'tmux_conf_theme_status_right' variables.

# by default, launching tmux will update tpm and all plugins
#   - true (default)
#   - false
tmux_conf_update_plugins_on_launch=true

# by default, reloading the configuration will update tpm and all plugins
#   - true (default)
#   - false
tmux_conf_update_plugins_on_reload=true

# by default, reloading the configuration will uninstall tpm and plugins when no
# plugins are enabled
#   - true (default)
#   - false
tmux_conf_uninstall_plugins_on_reload=true

# /!\ the tpm bindings differ slightly from upstream:
#   - installing plugins: <prefix> + I
#   - uninstalling plugins: <prefix> + Alt + u
#   - updating plugins: <prefix> + u

# /!\ do not add set -g @plugin 'tmux-plugins/tpm'
# /!\ do not add run '~/.tmux/plugins/tpm/tpm'

# to enable a plugin, use the 'set -g @plugin' syntax:
# visit https://github.com/tmux-plugins & https://github.com/tmux-plugins/list for available plugins
#set -g @plugin 'tmux-plugins/tmux-copycat'
#set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-resurrect' # prefix + Ctrl-s - save # prefix + Ctrl-r - restore
set -g @plugin 'tmux-plugins/tmux-continuum'

# plugin customizations
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
set -g @continuum-restore 'on'


# -- custom variables ----------------------------------------------------------

# to define a custom #{foo} variable, define a POSIX shell function between the
# '# EOF' and the '# "$@"' lines. Please note that the opening brace { character
# must be on the same line as the function name otherwise the parse won't detect
# it.
#
# then, use #{foo} in e.g. the 'tmux_conf_theme_status_left' or the
# 'tmux_conf_theme_status_right' variables.

# # /!\ do not remove the following line
# EOF
#
# # /!\ do not "uncomment" the functions: the leading "# " characters are needed
#
# weather() {                                         # see https://github.com/chubin/wttr.in#one-line-output
#   curl -f -s -m 2 'wttr.in/Rivne?format=3' || printf '\n' # /!\ make sure curl is installed
#   sleep 900                                         # sleep for 15 minutes, throttle network requests whatever the value of status-interval
# }
#
# online() {
#   ping -c 1 1.1.1.1 >/dev/null 2>&1 && printf '‚úî' || printf '‚úò'
# }
# 
# myip() {
#   IP=$(dig +short myip.opendns.com @resolver1.opendns.com)
#   VPN=("130.61.32.181" "1.1.1.1")
#   if [[ -z $IP ]]; then printf '‚úò' && exit; fi
#   if [[ ${VPN[@]} =~ $IP ]]; then echo "VPN: $IP"; else echo "IP: $IP"; fi
#   #sleep 5
# }
#
# _pane_info() {
#   pane_pid="$1"
#   tty="${2##/dev/}"
#   case "$_uname_s" in
#     *CYGWIN*)
#       ps -al | tail -n +2 | awk -v pane_pid="$pane_pid" -v tty="$tty" '
#         ((/ssh/ && !/-W/) || !/ssh/) && $5 == tty {
#           user[$1] = $6; parent[$1] = $2; child[$2] = $1
#         }
#         END {
#           pid = pane_pid
#           while (child[pid])
#             pid = child[pid]
#
#           file = "/proc/" pid "/cmdline"; getline command < file; close(file)
#           gsub(/\0/, " ", command)
#           "id -un " user[pid] | getline username
#           print pid":"username":"command
#         }
#       '
#       ;;
#     *)
#       ps -t "$tty" -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk -v pane_pid="$pane_pid" '
#         NR > 1 && ((/ssh/ && !/-W/) || !/ssh/) {
#           user[$2] = $1; parent[$2] = $3; child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#         }
#         END {
#           pid = pane_pid
#           while (child[pid])
#             pid = child[pid]
#
#           print pid":"user[pid]":"command[pid]
#         }
#       '
#       ;;
#   esac
# }
#
# _ssh_or_mosh_args() {
#   case "$1" in
#     *ssh*)
#       args=$(printf '%s' "$1" | perl -n -e 'print if s/(.*?)\bssh\b\s+(.*)/\2/')
#       ;;
#     *mosh-client*)
#       args=$(printf '%s' "$1" | sed -E -e 's/.*mosh-client -# (.*)\|.*$/\1/' -e 's/-[^ ]*//g' -e 's/\d:\d//g')
#       ;;
#   esac
#
#  printf '%s' "$args"
# }
#
#
# _hostname() {
#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}
#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}
#   ssh_only=$3
#   full=$4
#   h_or_H=$5
#
#   pane_info=$(_pane_info "$pane_pid" "$pane_tty")
#   command=${pane_info#*:}
#   command=${command#*:}
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     # shellcheck disable=SC2086
#     hostname=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk '/^hostname / { print $2; exit }')
#     # shellcheck disable=SC2086
#     [ -z "$hostname" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%hostname%% %h >&2'" $ssh_or_mosh_args 2>&1 | awk '/^%hostname% / { print $2; exit }')
#
#     if ! _is_true "$full"; then
#       case "$hostname" in
#           *[a-z-].*)
#               hostname=${hostname%%.*}
#               ;;
#           127.0.0.1)
#               hostname="localhost"
#               ;;
#       esac
#     fi
#   else
#     if ! _is_true "$ssh_only"; then
#       hostname="$h_or_H"
#     fi
#   fi
#
#   printf '%s\n' "$hostname"
# }
#
# uptime_ssh() {
#   pane_pid="$1"
#   pane_tty="$2"
#
#   pane_info=$(_pane_info "$pane_pid" "$pane_tty")
#   command=${pane_info#*:}
#   command=${command#*:}
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     conf=$(ssh -G $ssh_or_mosh_args 2>/dev/null | grep -E '^user |^hostname |^port |^identityfile ')
#     [ -z "$conf" ] && conf=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%username%% %r >&2'" $ssh_or_mosh_args 2>&1 | grep '^user |^hostname |^port |^identityfile ')
#     [ -z "$conf" ] && exit
#     username=$(echo "$conf" | awk '/^user / { print $2; exit }')
#     host=$(echo "$conf" | awk '/^host / { print $2; exit }')
#     hostname=$(echo "$conf" | awk '/^hostname / { print $2; exit }')
#     port=$(echo "$conf" | awk '/^port / { print $2; exit }')
#     identityfile=$(echo "$conf" | awk '/^identityfile / { print $2; exit }')
#     tunnel=$(echo "$conf" | awk '/^tunnel / { print $2; exit }')
#
#     boot=0
#     now=$(ssh $username@$hostname -p$port -i"$identityfile" 'cut -d" " -f1 < /proc/uptime') # -oPasswordAuthentication=no -oBatchMode=yes
#     [ -z "$now" ] && exit
#
#     awk -v boot="$boot" -v now="$now" '
#       BEGIN {
#         uptime = now - boot
#         y = int(uptime / 31536000)
#         dy = int(uptime / 86400) % 365
#         d = int(uptime / 86400)
#         h = int(uptime / 3600) % 24
#         m = int(uptime / 60) % 60
#         s = int(uptime) % 60
#
#         printf "%dd %dh %dm", d, h, m
#       }'
#   fi
# }
#
#
# "$@"
# # /!\ do not remove the previous line


##
##     -e "s%#{hostname}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false false '#h' '#D')%g" \
##     -e "s%#{hostname_full}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false true '#H' '#D')%g" \
##     -e "s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g" \
##     -e "s%#{hostname_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true false '#h' '#D')%g" \
##     -e "s%#{hostname_full_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true true '#H' '#D')%g")

##     now=$(ssh "$username@$hostname" 'cut -d" " -f1 < /proc/uptime')
##
##     awk -v boot="$boot" -v now="$now" '
##       BEGIN {
##         uptime = now - boot
##         y = int(uptime / 31536000)
##         dy = int(uptime / 86400) % 365
##         d = int(uptime / 86400)
##         h = int(uptime / 3600) % 24
##         m = int(uptime / 60) % 60
##         s = int(uptime) % 60
##
##         printf "%dd %dh %dm", d, h, m
##       }'
##   fi
## }

##     boot=0
##     now=$(ssh "$username@$hostname" 'cut -d" " -f1 < /proc/uptime')
##   else
##     case "$(uname -s)" in
##       *Darwin*|*FreeBSD*)
##         boot=$(sysctl -q -n kern.boottime | awk -F'[ ,:]+' '{ print $4 }')
##         now=$(date +%s)
##         ;;
##       *Linux*|*CYGWIN*|*MSYS*|*MINGW*)
##         boot=0
##         now=$(cut -d' ' -f1 < /proc/uptime)
##         ;;
##       *OpenBSD*)
##         boot=$(sysctl -n kern.boottime)
##         now=$(date +%s)
##     esac
##   fi
##
##   awk -v boot="$boot" -v now="$now" '
##     BEGIN {
##       uptime = now - boot
##       y = int(uptime / 31536000)
##       dy = int(uptime / 86400) % 365
##       d = int(uptime / 86400)
##       h = int(uptime / 3600) % 24
##       m = int(uptime / 60) % 60
##       s = int(uptime) % 60
##
##       printf "%dd %dh %dm", d, h, m
##     }'
## }